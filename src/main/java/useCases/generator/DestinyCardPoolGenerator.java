package useCases.generator;

import datagateways.DestinyCardDataManager;
import entity.Destiny;
import entity.DestinyCard;

import java.util.ArrayList;
import java.util.Arrays;

/**
 * The CardPoolGenerator class is responsible for generating a pool of destiny cards
 * that can be used within the Destiny block.
 * Destiny cards are used in a game to determine various outcomes and events.
 * This generator allows adding cards to the pool.
 * The DestinyBlock can later extend its card pool with the cards generated by this generator.
 */
public class DestinyCardPoolGenerator{

    /**
     * Generates a pool of DestinyCards and adds them to the specified Destiny instance.
     *
     * @param fileName The name of the CSV file containing DestinyCard information.
     * @param destiny  The Destiny instance to which the generated DestinyCards will be added.
     * @throws NullPointerException     If the provided Destiny instance is null.
     * @throws NumberFormatException    If action values in the CSV file are not in the expected numeric format.
     */
    public static void generateDestinyCardPool(String fileName, Destiny destiny) {
        if (destiny == null) {
            throw new NullPointerException("The Destiny instance must not be null.");
        }

        ArrayList<DestinyCard> cardPool = new ArrayList<>();
        ArrayList<Object> actions = new ArrayList<>(Arrays.asList(0, 0, 0));

        DestinyCardDataManager dataManager = new DestinyCardDataManager();
        ArrayList<String[]> data = dataManager.readData(fileName);

        // The values array contains the following elements:
        //   values[0]: Represents the message of the destiny card.
        //   values[1]: Represents the amount of money the player can get when the card is played.
        //   values[2]: Represents the distance the player can move or the ID of a block when the card is played.
        //   values[3]: Represents the number of rounds the player should stop when the card is played.
        for(String[] values: data){
            try {
                actions.set(0, Integer.parseInt(values[1]));
                actions.set(1, Integer.parseInt(values[2]));
                actions.set(2, Integer.parseInt(values[3]));
            } catch (NumberFormatException e) {
                // Handle the case where action values are not in the expected numeric format
                throw new NumberFormatException("Invalid action value in the CSV file: " + Arrays.toString(values));
            }

            String message = values[0].replace("\"", "");
            DestinyCard card = new DestinyCard(message, actions);
            cardPool.add(card);
        }
        destiny.addDestinyCardPool(cardPool);
    }
}

